function varargout = tTest(gatheredData)
% t_test using the specified dataframes
% this function automatically separates the dataframes by the problems and
% the algorithms and return t-test results in the format of 'L/U/G'
algorithms = {gatheredData(:, 1).algorithm};
functions = {gatheredData(1, :).func};
if numel(algorithms) < 2
    error('the data frames are generated by the same algorithm');
elseif numel(algorithms) > 2
    error('the data frames are generated by the more than 2 algorithms');
end
keep_index = ones(1, size(gatheredData, 2));
for i = 1: size(gatheredData, 1)
    for j = 1: size(gatheredData, 2)
        if numel(gatheredData(i, j).data) == 0
            warning('for %s on %s, there is not enough data', algorithms{i}, functions{j}); 
            keep_index(j) = 0;
        end
    end
end
gatheredData = gatheredData(:, keep_index == 1);
functions = {gatheredData(1, :).func};
tMatrix = NaN(1, numel(functions));
G = 0;
L = 0;
U = 0;
for i = 1: numel(functions)
[h, ~] = ttest2(gatheredData(1, i).data, gatheredData(2, i).data, 'Vartype', 'unequal');
if h == 1
    if mean(gatheredData(1, i).data) < mean(gatheredData(2, i).data)
        L = L + 1;
        tMatrix(i) = -1;
    else
        G = G + 1;
        tMatrix(i) = 1;
    end
else
    U = U + 1;
    tMatrix(i) = 0;
end
end
result = sprintf('%d/%d/%d', L, U, G);
if nargout == 1
    varargout = {result};
elseif nargout == 2
    varargout = {result, functions};
elseif nargout == 3
    varargout = {result, functions, tMatrix};
end
end